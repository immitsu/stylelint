// NOTICE: This file is generated by Rollup. To modify it,
// please instead edit the ESM counterpart and rebuild with Rollup (npm run build).
'use strict';

const validateTypes = require('../../utils/validateTypes.cjs');
const isStandardSyntaxDeclaration = require('../../utils/isStandardSyntaxDeclaration.cjs');
const optionsMatches = require('../../utils/optionsMatches.cjs');
const report = require('../../utils/report.cjs');
const ruleMessages = require('../../utils/ruleMessages.cjs');
const validateOptions = require('../../utils/validateOptions.cjs');

const ruleName = 'property-no-deprecated';

const messages = ruleMessages(ruleName, {
	expected: (unfixed, fixed) => `Expected "${unfixed}" to be "${fixed}"`,
	rejected: (property) => `Unexpected deprecated property "${property}"`,
});

const meta = {
	url: 'https://stylelint.io/user-guide/rules/property-no-deprecated',
	fixable: true,
};

/** @type {Record<string, string | null>} */
const DEPRECATED_PROPS_REMAP = {
	'-khtml-box-flex': 'flex-grow',
	'-khtml-box-ordinal-group': 'order',
	'-moz-box-flex': 'flex-grow',
	'-moz-box-ordinal-group': 'order',
	'-webkit-box-align': 'align-items',
	'-webkit-box-flex': 'flex-grow',
	'-webkit-box-ordinal-group': 'order',
	'-webkit-box-orient': null,
	'-webkit-box-pack': null,
	'box-direction': null,
	'box-pack': null,
	'grid-column-gap': 'column-gap',
	'grid-gap': 'gap',
	'grid-row-gap': 'row-gap',
	'image-orientation': null,
	'ime-mode': null,
	'page-break-after': 'break-after',
	'page-break-before': 'break-before',
	'page-break-inside': 'break-inside',
	'position-try-options': 'position-try-fallbacks',
	'scroll-snap-coordinate': null,
	'scroll-snap-destination': null,
	'scroll-snap-points-x': null,
	'scroll-snap-points-y': null,
	'scroll-snap-type-x': null,
	'scroll-snap-type-y': null,
	'user-modify': null,
	'word-wrap': 'overflow-wrap',
	clip: 'clip-path',
};

/** @type {import('stylelint').CoreRules[ruleName]} */
const rule = (primary, secondaryOptions) => {
	return (root, result) => {
		const validOptions = validateOptions(
			result,
			ruleName,
			{ actual: primary },
			{
				actual: secondaryOptions,
				possible: {
					ignoreProperties: [validateTypes.isString, validateTypes.isRegExp],
				},
				optional: true,
			},
		);

		if (!validOptions) return;

		root.walkDecls((decl) => {
			if (!isStandardSyntaxDeclaration(decl)) return;

			const { prop } = decl;
			const normalizedProp = prop.toLowerCase();

			if (optionsMatches(secondaryOptions, 'ignoreProperties', prop)) return;

			if (!Object.hasOwn(DEPRECATED_PROPS_REMAP, normalizedProp)) return;

			const mappedProp = DEPRECATED_PROPS_REMAP[normalizedProp];

			let fix;
			let message;
			let messageArgs = [];

			if (mappedProp) {
				message = messages.expected;
				messageArgs = [prop, mappedProp];
				fix = () => {
					decl.prop = mappedProp;
				};
			} else {
				message = messages.rejected;
				messageArgs = [prop];
			}

			report({
				message,
				messageArgs,
				node: decl,
				index: 0,
				endIndex: prop.length,
				result,
				ruleName,
				fix: {
					apply: fix,
					node: decl,
				},
			});
		});
	};
};

rule.ruleName = ruleName;
rule.messages = messages;
rule.meta = meta;

module.exports = rule;
